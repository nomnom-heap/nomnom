"use client";

import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";

import Page from "./demo/page";
import {
  Navbar,
  NavbarBrand,
  NavbarContent,
  NavbarItem,
  Link,
  Button,
} from "@nextui-org/react";

// import { ingredients } from "./data";

// import { Autocomplete, AutocompleteItem } from "@nextui-org/react";

import { Providers } from "./providers";

const inter = Inter({ subsets: ["latin"] });
// import AddCircleOutlineIcon from "@mui/icons-material/AddCircleOutline";

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body className={inter.className}>
        <Providers>
          <NavBar />
          <Page />
          <main>{children}</main>
        </Providers>
      </body>
    </html>
  );
}

function NavBar() {
  return (
    <Navbar
      position="static"
      isBordered
      className="bg-slate-500"
      maxWidth="full"
    >
      <NavbarBrand>
        <p className="text-2xl">ðŸ˜‹</p>
        <p className="font-bold text-white text-xl">NOMNOM</p>
      </NavbarBrand>
      <NavbarContent className="hidden sm:flex gap-4" justify="end">
        <NavbarItem>
          <Link className="text-white" href="#">
            My Favourites
          </Link>
        </NavbarItem>
        <NavbarItem>
          <p className="text-white">Not seeing what you like?</p>
        </NavbarItem>
        <NavbarItem>
          <Button as={Link} className="white" href="/demo">
            Create Recipe
          </Button>
        </NavbarItem>
      </NavbarContent>
    </Navbar>
  );
}

// function IngredientDisplay() {
//   const [ingredient, setIngredient] = useState([]);
//   const handleSelectionChange = (selectedItem) => {
//     setIngredient([...ingredient, { name: selectedItem }]);
//     console.log(ingredient);
//   };
//   if (ingredient.length > 0) {
//     return (
//       <div>
//         <h4>Ingredients so far</h4>
//         <ul>
//           {ingredient.map((x) => (
//             <li key={x.name}>{x.name}</li>
//           ))}
//         </ul>
//       </div>
//     );
//   }
// }

// const GET_INGREDIENTS_QUERY = gql`
//   query MyQuery($ingredientName: String!) {
//     searchIngredients(ingredientName: $ingredientName)
//   }
// `;

// const { data } = await client.query({
//   query: searchIngredients,
//   variables: {
//     ingredientName: ingredientName,
//   },
// });

// return data.searchIngredients;
